//$Id: X-Appl.cpp,v 1.40 2008/05/06 09:06:05 markus Rel $

//PROJECT     : General
//SUBSYSTEM   : XGP
//REFERENCES  :
//TODO        :
//BUGS        :
//REVISION    : $Revision: 1.40 $
//AUTHOR      : Markus Schwab
//CREATED     : 1.2.2003
//COPYRIGHT   : Copyright (C) 2003 - 2009

// This file is part of libYGP.
//
// libYGP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// libYGP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with libYGP.  If not, see <http://www.gnu.org/licenses/>.

#include <cerrno>
#include <cstdlib>

#include <fstream>
#include <iomanip>

#include <gtkmm/stock.h>
#include <gtkmm/button.h>
#include <gtkmm/liststore.h>
#include <gtkmm/messagedialog.h>

#include <YGP/File.h>
#include <YGP/Check.h>
#include <YGP/DynTrace.h>
#include <YGP/ConnMgr.h>
#include <YGP/ANumeric.h>
#include <YGP/StatusObj.h>

#include <XGP/XDate.h>
#include <XGP/XAbout.h>
#include <XGP/LoginDlg.h>
#include <XGP/XFileDlg.h>
#include <XGP/XPrintDlg.h>
#include <XGP/SearchDlg.h>
#include <XGP/AnimWindow.h>
#include <XGP/ConnectDlg.h>
#include <XGP/MessageDlg.h>

#include "Dialog.h"
#include "AnimWindow.h"

#include "X-Appl.h"


static YGP::DynTrace _dt_ ("Application");
static YGP::DynTrace dt ("Callbacks");

// Pixmap for program
const char* XAppl::xpmXAppl[] = {
   /* width height ncolors chars_per_pixel */
   "48 48 5 1",
   /* colors */
   "  c #000000",
   ". c #505550",
   "X c #AEAAAE",
   "o c #FFFFFF",
   "O c None",
   /* pixels */
   "oooooooooooooooooooooooooooooooooooooooooooooooo",
   "o                                              o",
   "o oo.                                      oo. o",
   "o oX                                       oX  o",
   "o .                                        .   .",
   "o                                              .",
   "o XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX .",
   "o XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX .",
   "o XX                                       .XX .",
   "o XX .X XXXXXoooooooooXoooooooooooXoooooooXoXX .",
   "o XX X..X....o........ o.......... o...... oXX .",
   "o XX .X X....o........ o.......... o...... oXX .",
   "o XX X..X....X         X           X       oXX .",
   "o XX .X XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXoXX .",
   "o XX X..X....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXoXX .",
   "o XX .X X....XX.X.X.XXXXX.X.X.X.XXXXX.X.XXXoXX .",
   "o XX X..X....XX.X.X.XXXXX.X.X.X.XXXXX.X.XXXoXX .",
   "o XX .X XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXoXX .",
   "o XX X..X....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXoXX .",
   "o XX .. X....XX.X.X.X.XXX.X.X.XXXXXXX.X.XXXoXX .",
   "o XX oo.X....XX.X.X.X.XXX.X.X.XXXXXXX.X.XXXoXX .",
   "o XX oX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXoXX .",
   "o XX .  X....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXoXX .",
   "o XX oo.X....XX.X.X.XXXXX.X.X.X.XXXXX.X.XXXoXX .",
   "o XX oX X....XX.X.X.XXXXX.X.X.X.XXXXX.X.XXXoXX .",
   "o XX .  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXoXX .",
   "o XX.oooooooooooooooooooooooooooooooooooooooXX .",
   "o XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX .",
   "o XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX .",
   "o XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX .",
   "o XXXXXXXXXXXXXXXXXXXXXXXXXXXX.............XXX .",
   "o XXoo.X.X.X.X.XXXXXX.X.X.X.XX.ooooooooooooXXX .",
   "o XXoX X.X.X.X.XXXXXX.X.X.X.XX.ooooooooooooXXX .",
   "o XX.  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX .",
   "o XXXXXXXXXXXXXXXXXXXXXXXXXXXX.............XXX .",
   "o XXoo.X.X.X.XXXXXXXXXX.X.X.XX.ooooooooooooXXX .",
   "o XXoX X.X.X.XXXXXXXXXX.X.X.XX.ooooooooooooXXX .",
   "o XX.  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX .",
   "o XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX .",
   "o XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX .",
   "o XXXXXXXXXXXXXoooooooo.Xoooooooo.Xoooooooo.XX .",
   "o XXXXXXXXXXXXXoXXXXXXX XoXXXXXXX XoXXXXXXX XX .",
   "o XXXXXXXXXXXXXoXXXXXXX XoXXXXXXX XoXXXXXXX XX .",
   "o XXXXXXXXXXXXX.        X.        X.        XX .",
   "o XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX .",
   "o XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX .",
   "o                                              .",
   "ooooo..........................................." };


// Pixmap for author
/* GdkPixbuf RGBA C-Source image dump */

#ifdef __SUNPRO_C
#pragma align 4 (picAuthor)
#endif
#ifdef __GNUC__
static const guint8 picAuthor[] __attribute__ ((__aligned__ (4))) =
#else
static const guint8 picAuthor[] =
#endif
{ ""
  /* Pixbuf magic (0x47646b50) */
  "GdkP"
  /* length: header (24) + pixel_data (4800) */
  "\0\0\22\330"
  /* pixdata_type (0x1010002) */
  "\1\1\0\2"
  /* rowstride (100) */
  "\0\0\0d"
  /* width (25) */
  "\0\0\0\31"
  /* height (48) */
  "\0\0\0""0"
  /* pixel_data: */
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\342\341"
  "\335\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\336\336\326\0\0\0"
  "\0\0\0\0\0\0\0\0\0\1\207\215\211\30\251\264\2579\247\265\260N\255\272"
  "\265P\267\301\300=\213\220\222\33\0\0\0\0\0\0\0\0\0\0\0\0\313\313\307"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\242k\211\0\227\235\233'\216\223\224\200\224\236"
  "\235\352\216\231\231\377\202\210\216\377{\201\206\377x\200\207\377\211"
  "\217\236\377\233\254\262\377\236\265\261\336\232\245\261`PKJ\12\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\377\377\377\0\226\227\226\23\237\250\244\236\217\226\231\377l"
  "rx\377Z_h\377KVY\377NYa\374Zdn\366Yhp\371dmy\377P]a\377JV[\376pz\204"
  "\377\260\277\303\371\220\225\2200\313\273\270\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\0\223\230\225)\271\301"
  "\302\377w|\201\377JUX\377AON\371GRT\277CELBqhe\17\212}}\14}ln\16""32"
  "7\35\200\225\224~\226\253\245\362[hy\377\77NV\376\216\243\237\377~\210"
  "\2074\377\377\377\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\346\345\336\0\0\0"
  "\0\0\235\243\241#\266\302\305\377jpt\376GS[\377dlm\301xvx\25""3./\4\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\256\250\247\7n\177\202"
  "^o\206\215\376FN[\377\231\251\241\377qx|\25\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\6\0\0\4\304\322\321\346irw\377IXZ\377P_ckROO\10\0\0\0"
  "\0\0\0\0\0\0\0\0\0\377\377\377\1\370\364\361\4\377\377\377\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\211\204\177\1bmn;_vw\376G[b\377g|~}\0\0\0\0!\34\35\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\250\264\261P\213\226\234\377HSY\377l\202\201"
  "\240NII\7\0\0\0\0\363\363\346\0\377\377\377\0w{v:\221\233\231\337\242"
  "\262\271\362\235\271\262\315;5;\32\0\0\0\0""61)\0\0\0\0\0\262\260\253"
  "\3\242\271\265\3076EL\377}\225\217\377\"\0\14\5\0\0\0\0\0\0\0\0\370\370"
  "\355\0\0\0\0\0\273\310\317\312Uaf\376{\223\217\365{tt\16\0\0\0\0""96"
  "7\0\0\0\0\0\246\257\257U\232\244\247\377hpv\377Zcj\376^lu\377}\226\230"
  "\366)\24\40\21\0\0\0\0\266\264\254\0\377\377\377\0lrt;O]e\377m\203\206"
  "\377lz}'\0\0\0\0\0\0\0\0\0\0\0\0a[`\17\261\301\304\377@OU\377\215\233"
  "\234\246\24\17\20\2\0\0\0\0\0\0\0\0\252\215\216\3\270\306\314\347{\206"
  "\213\376[ci\377\77HP\3770>B\377Vjy\377\202\232\230\237\0\0\0\0\0\0\0"
  "\0\377\377\377\0B<>\32[ls\377Wkt\377\200\215\221<\0\0\0\0\0\0\0\0\0\0"
  "\0\0\256\273\270-\226\244\252\377Rfl\377NTb@\0\0\0\0\22\15\15\0\0\0\0"
  "\0""1\31\33\12\237\257\271\370mt~\377AJM\377)49\377*3=\377DT]\376y\225"
  "\222\321\360\350\352\1\0\0\0\0\377\377\377\0:49\36]kv\377[ky\377\205"
  "\217\225B\0\0\0\0\0\0\0\0\0\0\0\0\253\275\2628\204\223\232\377[nz\377"
  "(\25\24\24\0\0\0\0\0\0\0\0\0\0\0\0Z@;\10\225\247\264\363Sab\376)37\377"
  "\",3\377%-3\377IXa\377\200\216\221\240\0\0\0\1\0\0\0\0\315\307\306\0"
  "\222\246\241gGU^\377gw\203\377~\204\2044\0\0\0\0\0\0\0\0\0\0\0\0\232"
  "\250\245(\212\234\245\377Xkr\377:8\77%\0\0\0\0\0\0\0\0\0\0\0\0\377\377"
  "\377\0\253\272\264\260dv\202\3772=G\376\40).\377#-5\376fu|\372<:=\27"
  "\0\0\0\0\0\0\0\0\345\345\340\1\233\267\262\3309@K\377f~~\377W\\a\34\0"
  "\0\0\0\0\0\0\0\0\0\0\0/\32#\11\237\262\255\377Q]e\377\210\231\233|\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\3\211\236\244\254jz\200\365IT]\376"
  "4D@\326IPZ6\35\31\34\2,('\0\0\0\0\0xwx\33fvz\3753AG\376gy\201\330P\40"
  "\20\2\0\0\0\0\0\0\0\0\365\365\353\0\0\0\0\0\217\247\245\272ES_\376\232"
  "\255\275\360\240\226\221\7\0\0\0\0\214\210\200\0\0\0\0\0\0\0\0\0\377"
  "\377\377\1R),\6eGA\11\377\377\377\3\0\0\0\0QNO\0\0\0\0\0\271\265\254"
  "\5\203\233\233\31239K\377IY`\377\\jhH\206zy\0\21\14\16\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\227\245\253Dex}\377Maj\377\207\230\226w\236\221\213\2\0"
  "\0\0\0\0\0\0\0\0\0\0\0\22\14\16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\274\264\253\4q~\201~*9<\377,8@\376hxx\333L@C\7\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0""3\0\0\2\221\250\241\312IX[\377bw~\377\213\234"
  "\237~\223\226\224\14\337\245\241\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\377\377\355\0\177\203\200\25cnr\254+69\377'06\377htt\373tvw\32"
  "\0\0\0\0\22\15\15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\202\205\210"
  "\25\211\247\237\371LZf\377L\\d\376\225\256\256\377\233\252\251\201ln"
  "o%\214\217\216\30\231\234\233\23\210\211\212\31\\``0qvy\245NY^\377\""
  "/1\376+1\77\377\\ih\372jkj\35&!!\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\206\207\210\25\226\252\257\330avz\377"
  "Xcj\376iry\377\203\211\224\376\212\223\227\375\206\215\223\374t{\202"
  "\375Xbg\376GMU\377'17\376/;=\377T^^\313\200\201\202\25JFE\0\0\0\0\0\22"
  "\15\16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\177zy\6u|}<\233\265\257\336\242\265\262\377\215\227\241\377~\205"
  "\217\377bkp\377S]a\377GNU\376FWW\377@NL\270Y^\\+MGF\7\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\233\231\227\0\0\0\0\0\377\377\377\0\15\0\0\2\221\230\226\33\241"
  "\252\2572\252\277\274\313it|\376KSU\377^pu\377\31\6\10\21n[^\2\"\32\34"
  "\0\0\0\0\0\21\14\16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\254\304\300\230kx\202\377HQZ\377\202\224\232\377\0\0\0\12"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\376\376\343\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\232\247\243\215Y^o\377FK_\377y\214\225"
  "\377\0\0\0\6T\\\\\"cpp+qup+/'0\25\0\0\0\4\0\0\0\0\0\0\0\0fb_\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\3\220\231\223"
  "8\241\252\254t\212\221\217\241goq\272Zad\347BFY\377;@S\377<DO\376IZ["
  "\377EVT\377FU]\377N]e\377cvx\377\212\230\234\366\205\234\230\244pln\7"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\216~r\1\267\274\277"
  "l\244\253\253\364\220\227\233\377tz\203\377\\ci\377KSY\377AIR\3776<J"
  "\37716E\377*29\377$/5\377$.6\377'08\377'04\377'18\377@KV\377gx\203\377"
  "y\206\2113\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\322\322\315\0\0\0\0\0\252"
  "\264\263Y\242\254\261\377v}~\377^gl\376^bl\377T^e\377Sag\377PY`\3775"
  ">B\376'16\377*4;\377-8=\3778DK\377MW^\365S]a\364K\\a\375)3;\377[is\377"
  "p}~1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\216\223\221\25\267\307\312"
  "\377clr\376R]b\377Q_`\327ktp\232s\177\210k_jvE\235\264\246\263GU]\377"
  "(3:\377M[Y\320L=@\20^J@\13\212eh\6|\\]\6VB@\20ET\\\374bsv\377]`h\26\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\250\264\265kz\206\215\377boq\375"
  "Y^iO\266\252\253\5\0\0\0\1\0\0\0\0\0\0\0\0\261\305\307\226Ves\377;GO"
  "\377|\225\227\316\377\377\377\0\0\0\0\0\0\0\0\0\0\0\0\0\200\202\202\30"
  "7FL\375\\em\272H94\3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\255\276"
  "\267\325nw~\377ox~Z\7\2\3\3\0\0\0\0\227\225\206\0\0\0\0\0\0\0\0\0\237"
  "\267\273\266JU]\377HUc\377\207\242\243\302\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0MQU5;FG\377dhg!\0\0\0\0\22\15\15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\4\245\263\272\377\216\236\240\340\230\217\216\7\0\0\0\0\0\0\0\0\374"
  "\366\371\0\310\310\303\4tss\32drs\3163=D\376<HO\377\207\232\236\326z"
  "\210~`P[Z7fhh$\221\223\224\24:IL|LPY8<76\2\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0VTX\20\236\247\252\377p|}i\0\0\0\0\0\0\0\0\271\270\267"
  "\12dklUnyw\361R[d\375<CM\377+4>\37707C\3772;G\3779CF\377=HR\377BOV\376"
  "Tbp\375v\231\212\367Q\\Y4\377\374\371\0\240\237\236\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\2\224\235\233\373\37\27\32\21\357\352\342\3}\205"
  "\203S\202\213\217\363\\ci\377MTX\377.:=\376'17\377)18\377$/4\377'06\377"
  ",3\77\377(3=\377,4\77\377.8=\376KZb\377\203\226\234\377\201\206\207\30"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\375\375\361\0\0\0\0\0qtyH\211\202\201"
  "\13\261\301\272\257|\205\212\377V^a\3773\77E\377.5>\377'/4\377\37*-\377"
  "!+3\377*/:\376+3>\3778\77M\3770;D\377*78\377-4A\3777>H\377Yjo\377hqn"
  "6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\236\244\243"
  ":\241\250\252\377Y`i\37709>\377$-2\376%04\3779AJ\377>GJ\343\77HL\245"
  "HRWtWddVw\200\202Hi{{sw\215\214\377IPa\376,2;\377^en\376agl;\377\377"
  "\377\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\253\275\265\241"
  "r~\206\3769>E\376/8A\3778DB\306@HFPFEF\25\330\264\257\2\0\0\0\0\0\0\0"
  "\0+\0\10\0\0\0\0\0\0\0\0\0~\213\207<h\177\204\377&46\377Q]j\377fkl8\263"
  "\241\250\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\260\304\305"
  "\345Ycn\3770;C\377[po\334\236\220\227\7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\257.I\0~\231\222\302;FR\377O\\e\377"
  "ryx*\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\3\262\302"
  "\305\3778GM\377IYa\376QT\\.\0\0\0\0)&&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_jnK<FO\376Zmm\377mqr\25\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\5\0\0\3\231\263\255\3775AH\376"
  "s\204\203\372\206\206\207\20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\\ijU)57\377]jn\311A75\4\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\2\221\254\251\363"
  "9BI\377w\211\206\360URS\5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0extu)39\377PRT-\216\210\205\0\21"
  "\14\15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\210\244\241"
  "\3249AO\377n\201|\267\31\24\25\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\0`oi\247/;<\326`\\]"
  "\10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{"
  "\223\221\2250<E\377`pj\212\336\332\335\0\22\15\16\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\0\77GI\311"
  "\212\207\207\23\377\377\377\0\21\15\15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0q~{C2;E\377HVZq\233\227\227\0.)#\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\300\300\301"
  "\0\260\256\255\13\2\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0|\203\203\21LZX\377HQR\2220+%\1\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\22\14\15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\0GOSl&03\373||{\27\0\0\0\0""842"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\233\232\231\7/8:\2365;A\351~|\177\6\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\262\260\254\0\0\0\0\0\354\337\336\2\77AG0ZXX\5\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0""500\0\0\0\0\0\0\0\0\0\0\0\0\0+((\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"};




#if 0
/* GdkPixbuf RGBA C-Source image dump */
#ifdef __SUNPRO_C
#pragma align 4 (picAuthor)
#endif
#ifdef __GNUC__
static const guint8 picAuthor[] __attribute__ ((__aligned__ (4))) =
#else
static const guint8 picAuthor[] =
#endif
{ ""
  /* Pixbuf magic (0x47646b50) */
  "GdkP"
  /* length: header (24) + pixel_data (3956) */
  "\0\0\17\214"
  /* pixdata_type (0x1010002) */
  "\1\1\0\2"
  /* rowstride (92) */
  "\0\0\0\\"
  /* width (23) */
  "\0\0\0\27"
  /* height (43) */
  "\0\0\0+"
  /* pixel_data: */
  "\0\0\0\0\273\273\273\0\0\0\0\0\0\0\0\0\0\0\0\0\266\265\272\0\333\333"
  "\334\0\337\337\336\2\341\342\340\10\337\336\335\21\332\331\331\33\325"
  "\323\324\40\316\315\315\40\303\302\302\31\263\262\261\16\225\223\222"
  "\6igg\2GEF\0\27\23\24\0\0\0\0\0\0\0\0\0%!\"\0\0\0\0\0\271\271\271\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\326\325\327\0\345\346\344\6\347\347\345\33\343"
  "\341\341@\341\336\335j\330\323\324\221\310\301\307\256\275\265\276\273"
  "\270\256\270\271\267\256\266\244\274\266\267z\260\254\253I\226\222\222"
  "#kif\14""412\3!\35\37\0\0\0\0\0\0\0\0\0#\36\40\0\377\377\377\0\0\0\0"
  "\0\24\15\26\0\327\326\326\3\353\352\350\26\347\346\345M\331\325\330\231"
  "\276\264\302\334\235\217\250\375\201o\220\377o\\\201\377gRy\377fQx\377"
  "jU}\377s_\205\377\202p\215\357\220\201\221\242\177v|INKH\26%\"!\6\36"
  "\31\33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\330\331\327\3\354\353\351\""
  "\341\336\337z\302\272\306\331\221\201\236\377cPu\377E3V\3755&C\3671$"
  ";\3571&:\3513'=\3539*E\360D1T\367R<f\377^Fs\377lWx\333`T^b0,+\35\40\35"
  "\36\7\"\36\40\0\0\0\0\0\227\212\213\0\327\326\326\1\347\347\346\36\337"
  "\334\335\204\263\250\272\357s`\204\377C0T\376.\"7\357'!*\317$!\"\250"
  "\"\40\36\211\40\36\35z\"!\37y*(%\2104-3\250\77""2G\322O:^\365T<k\377"
  "\\Hi\350H>Ff'#$\35!\36\37\5\"\36\37\0\0\0\0\0\340\340\337\15\344\342"
  "\340e\265\253\273\352mY~\377:)H\373)!-\334\"\40\40\237\40\36\37eMKJI"
  "\220\217\212J\242\241\230G{{p2.,,(\27\26\27""4+*#VJ\77J\237WAh\356R:"
  "h\377PAV\312.),J#\37\40\20#\37\40\1\320\321\320\1\340\337\336,\312\303"
  "\312\273~k\216\377\77-O\375)\",\332!\36\36\210&\"$D\235\233\230=\323"
  "\317\320|\300\270\304\264\251\235\257\275\223\205\230\226ulrD0/$\25\22"
  "\16\23\26+-\32.iYn\247]Eq\370K8Z\377605\204%!##\"\36\40\4\322\321\320"
  "\6\337\335\332V\243\226\254\364VAh\377/#6\355\"\37\37\230\37\32\36>\226"
  "\225\220)\327\322\325}\262\246\271\352\206t\226\377oZ\203\377hR{\377"
  "_Mi\274B9@N\25\25\22\23\11\10\15\16\236\232\217]q\\\202\354K6^\37792"
  ":\265%\"$9\"\36\37\11\316\314\315\16\324\317\315}\203q\223\377A.R\374"
  "*$+\313\36\32\34\\.++\32\322\317\315:\270\256\274\300\177k\220\377\\"
  "Dr\377Y@n\376X\77n\377N9_\377<1@\240$$\37.\36\33$\13\323\325\276I\205"
  "s\223\347P;c\3777.:\321$\40$L\"\36\40\16\303\302\302\24\300\270\275\226"
  "r]\204\3779)H\370)&&\250\37\33\36""7EFA\15\300\272\275C\232\212\241\323"
  "gO|\377W>m\376X\77o\377Y@n\376F2X\3772*8\302%$!E417\17\342\343\322W\215"
  "{\233\353P;c\3774+8\331#\40#U\"\36!\20\265\263\264\24\262\251\260\227"
  "jU~\377:*I\366*(%\221\37\32\36)674\7\253\245\241.\201o\210\265\\Cs\377"
  "Y@o\376ZAq\376S<h\377<-I\377*#-\272\35\32\33A~~~\27\327\323\320\200\212"
  "w\230\362I6\\\377/(2\324#\37#Q\"\36\40\20\235\232\232\20\261\251\252"
  "{iS}\377B/Q\3663/-\224\34\31\34(%\"\"\6_aO\17_Q`jT@a\361J4^\377H3[\377"
  ";+J\377-%3\347$!$\207\26\23\25)\323\327\3160\304\274\305\273ze\213\373"
  "\77.N\377+&+\277#\37\"C\"\36\40\15}{z\11\244\237\232OpZ\200\376N8`\372"
  "B9C\261\30\26\25""5\"\36\40\11\32\30\26\5""1,.);3;\2029/<\3240(6\350"
  "*$,\320$\40#\217\33\27\31@xxx\"\351\350\342w\245\226\257\352]Ho\3775"
  ")>\371$\40$\231\"\37!/#\36\40\10PMM\4vpr*wd~\307W>k\377P=]\343FD9[\24"
  "\21\24\25)%&\5\36\33\34\12%!$&$\40%M#\37#`!\36\40Q\37\34\35""1xwy%\354"
  "\355\344b\300\266\304\327xe\212\376\77-O\377+%-\325\"\37!f\"\36\40\33"
  "#\37\37\4*&'\2IFE\22ndgaYAl\377V\77l\375cOm\315{vlQzxy#\210\206\206\22"
  "khh\16QNN\23VST\32\200\177\177\"\306\305\305:\350\346\341}\302\272\307"
  "\333\202p\223\376G4Y\3770&5\355#\37#\223\"\36\40""6#\37\40\15\"\36\37"
  "\1\"\36\37\0$\40!\6""3-/(^P_\243R:e\377[Bp\377r]\201\356\234\217\233"
  "\253\275\267\265v\310\305\302_\317\314\314\\\331\326\324j\333\330\326"
  "\215\314\305\314\306\247\232\261\366t`\205\377E2U\3770&6\357$\37$\246"
  "\"\36\40J#\37\40\27\"\36\37\4#\36\40\0\0\0\0\0!\35\36\1!\35\35\16""1"
  "-,=OCP\257I6Z\370S<g\377cMx\377wc\211\377\214{\230\375\230\210\242\371"
  "\227\207\242\376\211x\230\377q\\\202\377Q<c\3777(D\373,$1\343#\40#\240"
  "\"\36\40N#\37\40\34#\37\37\6#\37\40\0#\36\40\0\0\0\0\0\0\0\0\0\"\36\37"
  "\3\35\32\34\21&#\"<>79\217>0E\330=,J\362D1S\370S<e\374^Et\377\\Cr\377"
  "H4[\3764%@\370,\"1\346'#'\275!\36\37\200!\35\37A\"\36\37\32\"\36\37\7"
  "#\37\40\0\0\0\0\0\0\0\0\0#\37\40\0\0\0\0\0\0\0\0\0\"\36\36\2\35\31\32"
  "\15\30\26\27'\"!\36S+((\205926\250ZJa\324`Gv\377U<j\377>/I\372&!%\310"
  "\35\33\32\204\40\35\37N\"\36\40'\35\31\33\20\25\21\24\5\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\317\316\316\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0%#'\5"
  "MKL\23HGG&tvjE\221\207\224\246t_\206\377T=j\377C4O\364A;\77\244wvo^\261"
  "\260\250C\312\312\2774\334\336\313\"\320\331\277\16psn\3$\40\"\0!\35"
  "\36\0#\37\40\0\0\0\0\0\0\0\0\0\0\0\0\0\345\344\347\4\376\377\370\31\370"
  "\372\3567\336\334\332W\316\310\315p\311\303\310\215\255\243\263\316w"
  "c\211\377V=l\377VAf\365{m\201\320\245\232\251\302\254\240\261\300\252"
  "\237\260\271\246\232\253\247\222\204\226xe_^(*'%\12!\35\37\2\0\0\0\0"
  "\0\0\0\0\235\234\240\0\346\350\346\11\360\361\354>\325\320\326\227\272"
  "\260\277\306\250\233\261\336\233\214\246\355\223\202\237\366\203p\222"
  "\374fOz\377Y\77n\376]Dr\377kT\177\377q[\204\377oY\203\377nX\202\377p"
  "[\203\377ePu\367K\77M\217*&)+\"\36\37\7\"\36\37\0\276\274\275\0\333\332"
  "\331\3\351\351\3476\322\313\322\265\235\217\251\374t`\206\377aKs\377"
  "U@i\377P;c\377S;g\377X\77n\376W>m\376N7b\377F1X\377C0U\377C0S\377G4X"
  "\377R;h\377I3^\3778.>\326&\"'L\"\36\40\15\"\36\40\1\0\0\0\0\341\340\337"
  "\26\336\331\331\207\234\216\250\374ZDm\377=,L\3775(>\3671&8\3554*8\336"
  "O\77X\343_Gt\377Q:f\377;-F\370-%1\343+$.\322*\"-\3103,4\271`Mm\351E2"
  "V\377/(2\321$\40#O\"\36\40\17#\36\40\1\314\312\312\2\334\333\3337\272"
  "\260\275\321bOt\3774%>\371(\")\321\"\36#\242\40\34\40\200=;6t~s\201\265"
  "r\\\205\377N8b\3775)<\354#\40!\237\34\32\31b\27\25\25Mwykf\200n\212\335"
  "B3M\377(#)\256#\37\"<\"\36\40\14\"\37\37\1\315\314\314\6\331\327\324"
  "Y\216~\232\370:+I\373&\"'\303\37\34\35r\32\26\30;+(*(\247\250\234D\251"
  "\240\255\263u`\210\377N7b\3778,\77\330:84vefb9{{z$\322\321\303YbOq\353"
  "6,<\334$\40$r\"\36!%#\36\40\7\"\37\37\0\304\302\302\13\320\314\307nf"
  "Rw\377/&4\336\36\33\35y><=6\273\272\2676\351\350\341a\335\332\330\245"
  "\253\237\262\347nX\201\377S:i\377cOp\357\222\205\225\322\256\243\257"
  "\274\271\261\270\242\301\271\267\226\\Q[\252)$*\200\"\37!9\"\37\40\22"
  "#\36\37\2#\36\37\0\255\254\253\13\300\272\263fN9`\377.*-\254dbbV\331"
  "\327\323z\321\313\321\277\256\242\266\357\216|\235\374r]\205\376]Er\377"
  "Y@n\377_Gu\376jT~\375q\\\204\374va\210\373u`\207\375hTr\337D=Al&#!'\""
  "\36\37\12\"\36\37\1\"\36\40\0\200}|\6\214\207~8M<V\345TRNy\315\311\313"
  "\263\256\242\267\367\204q\225\377iS}\376]Er\377YAo\377X\77m\376V>l\376"
  "V>k\377V>k\377X\77n\377Y@o\377[Bq\377Q:g\377F:K\302,&+D\40\35\36\14\""
  "\36\37\1#\37\40\0""401\3*&)\26[UUR\272\263\266\236\234\215\250\377kU"
  "\177\377Y@o\376S:g\377L6^\376D1U\376=,M\3758)G\3757(C\373:+G\371G4W\374"
  "U=i\376Y@o\377P:d\377<0D\350'\"(e!\36\37\25#\37\40\1\"\36\37\0\40\34"
  "\35\0fcc\11\305\301\303H\256\243\264\346mW\201\377S;g\377C0T\3764&\77"
  "\371.$4\353*#-\330)$(\305(%%\261&#\"\242%#!\231A9>\261T\77b\353ZAp\377"
  "P9d\3777,\77\356%!&r\"\37\40\32#\37\40\2\"\36\37\0\377\377\377\0\301"
  "\300\274\11\317\314\312`\223\202\236\376\\Dq\377C1T\376,#1\352#\40\40"
  "\264\36\34\35\201\36\34\35^\40\35\37F\40\35\37""7!\35!-\37\33\37+\26"
  "\27\17""5hZi\230dLv\363M7a\3774*;\352$\40%n\"\36\40\32#\36\40\2#\37\37"
  "\0\264\262\265\0\307\306\301\13\313\307\304k\202p\222\377S<g\3775'@\366"
  "$!\"\263\36\33\36T$\37!$#\37\40\24#\37\37\15#\36\37\11\"\36\36\7\23\17"
  "\16\6\26\24\31\15\250\245\227Wwc\206\342H5Z\377/'3\332$\40#^\"\36\37"
  "\26\"\37\37\1#\37\40\0\244\243\246\0\271\270\263\15\305\300\274k{g\214"
  "\377L7^\377/%5\346\37\35\35{$\37\40#\"\36\36\10\"\36\37\1#\37\40\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0;>O\3\333\333\312P\200m\217\341A1O\377)$*\270#"
  "\40!E\"\36\40\17\"\36\37\1#\37\40\0\222\217\224\0\253\252\246\13\273"
  "\267\264b{f\212\377F3W\375,%0\320\36\33\34W#\37\40\22\"\36\36\1\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\252\263\264\4\330\325\316_mZ}\352"
  "9-@\355$\37$\206\"\36\37+#\37\40\10#\37\37\0\"\37\40\0xvy\0\226\225\221"
  "\10\256\250\251P}j\212\371B0R\373+&,\274\36\34\35B#\37\37\13#\36#\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\373\377\373\5\262\250\256mUD_"
  "\347/'2\266#\40\"O\"\36\37\27#\36\37\3\0\0\0\0\0\0\0\0VSU\0{zw\4\232"
  "\224\230:\177m\210\340A.Q\373,(+\253\36\34\36""5#\36\36\10\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\3wjvOB9D\230(#)a!"
  "\36\37$\"\37\37\11#\36\37\0\0\0\0\0\0\0\0\0\26\22\24\0USR\1\203~\200"
  "\"\201r\203\247F2W\3773.0\234\33\30\32/#\37\37\7\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0""11/\1""816\30,**-%\"#\35\"\36\40\15\"\36"
  "\37\3#\37\40\0\0\0\0\0#\36\40\0\27\23\24\0-)+\1_\\X\17qfmWXDf\364J<O"
  "\265!\"\31""2\37\32\35\14\40\34\34\0\0\0\0\0\"\37\40\0\0\0\0\0\77<<\0"
  "\0\0\0\0\32\25\27\0\16\15\15\3\32\30\30\6!\35\36\5\"\36\40\2#\37\40\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\23\17\20\0&\"#\0+('\6C==$YK[\230J9V\356C:C|"
  "\24\23\23\26!\35\33\2\25\21\22\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#\37"
  "\40\0\35\32\30\0!\35\36\1\"\36\36\0#\37\37\0\0\0\0\0\0\0\0\0\"\36\40"
  "\0\0\0\0\0\0\0\0\0%!!\0\37\33\35\1$\40!\15""714:>6\77\21392:\201\36\34"
  "\36\36\40\34\32\3\22\16\17\0\0\0\0\0\0\0\0\0\0\0\0\0\"\37\40\0\0\0\0"
  "\0\0\0\0\0#\37\40\0\0\0\0\0\0\0\0\0\0\0\0\0\"\37\40\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\"\36\37\0!\35\37\3#\37!\17)%'#)$)&#\37!\17\"\36\36\3"
  "\"\36\37\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\"\36\40\0\0\0\0\0"
  "\0\0\0\0#\37\40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\"\37\40\0\0\0\0\0\0"
  "\0\0\0\"\36\40\0\"\36\40\2\"\36\40\5#\37\40\6#\37\40\4\"\36\37\1\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"};
#endif


const char* XAppl::pTitles[] = { "", "File", "Size", "Last change" };


//-----------------------------------------------------------------------------
/// Defaultconstructor; all widget are created
//-----------------------------------------------------------------------------
XAppl::XAppl ()
   : XApplication ("X-Appl V" LIB_RELEASE), cols (), files (Gtk::ListStore::create (cols)),
     listFiles (files) , status (), scroll (), time (), file (), num () {
   TRACE3 ("XAppl::XAppl ()");

   setIconProgram (xpmXAppl);
   set_default_size (620, 400);

   TRACE5 ("XAppl::XAppl () -> Create menus");
   Check3 (grpAction);
   Glib::ustring ui ("<ui><menubar name='Menu'>"
		     "  <menu action='File'>"
		     "    <menuitem action='FOpen'/>"
		     "    <menuitem action='FSave'/>"
		     "    <menuitem action='FPrint'/>"
		     "    <separator/>"
		     "    <menuitem action='FQuit'/>"
		     "  </menu>"
		     "  <menu action='Dialogs'>"
		     "    <menuitem action='DDialog'/>"
		     "    <menuitem action='DDate'/>"
		     "    <menuitem action='DConnection'/>"
		     "    <menuitem action='DMsg'/>"
		     "    <menuitem action='DLogin'/>"
		     "    <menuitem action='DSearch'/>"
		     "  </menu>"
		     "  <menu action='Extras'>"
		     "    <menuitem action='XAnimate'/>"
		     "  </menu>");

   grpAction->add (Gtk::Action::create ("File", "_File"));
   grpAction->add (Gtk::Action::create ("FOpen", Gtk::Stock::OPEN),
		   mem_fun (*this, &XAppl::open));
   grpAction->add (apMenus[SAVE] = Gtk::Action::create ("FSave", Gtk::Stock::SAVE),
		   mem_fun (*this, &XAppl::save));
   grpAction->add (apMenus[PRINT] = Gtk::Action::create ("FPrint", Gtk::Stock::PRINT),
		   mem_fun (*this, &XAppl::print));
   grpAction->add (Gtk::Action::create ("FQuit", Gtk::Stock::QUIT),
		   mem_fun (*this, &XAppl::hide));
   grpAction->add (Gtk::Action::create ("Dialogs", "_Dialogs"));
   grpAction->add (Gtk::Action::create ("DDialog", "_Dialog ...",
					"Tests the common dialog"),
		   Gtk::AccelKey ("<ctl>D"),
		   mem_fun (*this, &XAppl::showDialog));
   grpAction->add (Gtk::Action::create ("DDate", "Da_te ...",
					"Tests the date dialog"),
		   Gtk::AccelKey ("<ctl>T"),
		   mem_fun (*this, &XAppl::showDateDialog));
   grpAction->add (Gtk::Action::create ("DConnection", "_Connection ...",
					"Tests the connection dialog"),
		   Gtk::AccelKey ("<ctl>C"),
		   mem_fun (*this, &XAppl::showConnectDialog));
   grpAction->add (Gtk::Action::create ("DMsg", "_Messagedialog ...",
					"Tests the message dialog"),
		   Gtk::AccelKey ("<ctl>M"),
		   mem_fun (*this, &XAppl::showMsgDialog));
   grpAction->add (Gtk::Action::create ("DLogin", "_Logindialog ...",
					"Tests the login dialog"),
		   Gtk::AccelKey ("<ctl>L"),
		   mem_fun (*this, &XAppl::showLoginDialog));
   grpAction->add (Gtk::Action::create ("DSearch", Gtk::Stock::FIND, "_Searchdialog ...",
					"Tests the search dialog"),
		   mem_fun (*this, &XAppl::showSearchDialog));
   grpAction->add (Gtk::Action::create ("Extras", "_Extras"));
   grpAction->add (Gtk::Action::create ("XAnimate", "_Animate",
					"Tests the animated window"),
		   Gtk::AccelKey ("<ctl>A"),
		   mem_fun (*this, &XAppl::animate));
   addHelpMenu (ui, true);
   ui += "</menubar></ui>";
   mgrUI->insert_action_group (grpAction);
   add_accel_group (mgrUI->get_accel_group ());
   mgrUI->add_ui_from_string (ui);

   getClient ()->pack_start (*mgrUI->get_widget("/Menu"), Gtk::PACK_SHRINK);

   // Disable menus according to state of program
   TRACE7 ("XAppl::XAppl () -> Initialize menus");
   apMenus[SAVE]->set_sensitive (false);
   apMenus[PRINT]->set_sensitive (false);

   TRACE5 ("XAppl::XAppl () -> Create scrollwindow");
   scroll.set_policy (Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   vboxClient->pack_start (scroll);

   TRACE5 ("XAppl::XAppl () -> Create file-list");
   listFiles.append_column ("Size", cols.size);
   listFiles.append_column ("Date", cols.date);
   listFiles.get_column (0)->set_min_width (390);
   listFiles.get_column (1)->set_min_width (60);
   listFiles.get_column (2)->set_min_width (105);
   listFiles.get_selection ()->set_mode (Gtk::SELECTION_EXTENDED);

   scroll.add (listFiles);

   TRACE5 ("XAppl::XAppl () -> Create statusbar");
   status.push ("Populate the list with File-Open or Dialogs-Dialog");
   vboxClient->pack_end (status, Gtk::PACK_SHRINK);

   show_all_children ();
}

//-----------------------------------------------------------------------------
/// Opens a dialog to select file(s)
//-----------------------------------------------------------------------------
void XAppl::open () {
   OTRACE3 (dt, "XAppl::open");
   XGP::FileDialog::create ("Add file(s)",
			    Gtk::FILE_CHOOSER_ACTION_OPEN,
			    XGP::FileDialog::MUST_EXIST
			    | XGP::FileDialog::MULTIPLE)
      ->sigSelected.connect (mem_fun (*this, &XAppl::addFile));
}

//-----------------------------------------------------------------------------
/// Opens a dialog to save to a file
//-----------------------------------------------------------------------------
void XAppl::save () {
   OTRACE3 (dt, "XAppl::save");
   XGP::FileDialog::create ("Save search result to ...",
			    Gtk::FILE_CHOOSER_ACTION_SAVE,
			    XGP::FileDialog::ASK_OVERWRITE)
      ->sigSelected.connect (mem_fun (*this, &XAppl::saveToFile));
}

//-----------------------------------------------------------------------------
/// Opens a dialog to print
//-----------------------------------------------------------------------------
void XAppl::print () {
   OTRACE3 (dt, "XAppl::print");
   XGP::PrintDialog::create ()->sigPrint.connect (mem_fun (*this, &XAppl::writeToStream));
}

//-----------------------------------------------------------------------------
/// Opens a dialog to enter a date
//-----------------------------------------------------------------------------
void XAppl::showDateDialog () {
   OTRACE3 (dt, "XAppl::showDateDialog ()");
   XGP::XDate::create ("Enter date", time);
}

//-----------------------------------------------------------------------------
/// Opens a dialog to connect with other computers
//-----------------------------------------------------------------------------
void XAppl::showConnectDialog () {
   OTRACE3 (dt, "XAppl::showConnectDialog ()");
   static YGP::ConnectionMgr cmgr;
   XGP::ConnectDlg::perform (4, 4711, cmgr);
}

//-----------------------------------------------------------------------------
/// Opens a dialog to enter a number and a filename
//-----------------------------------------------------------------------------
void XAppl::showDialog () {
   TRACE9 ("XAppl::showDialog () - Num: " << num << "; File: " << file);
   TDialog<XAppl>::create (*this, &XAppl::addActFile, num, file);
}

//-----------------------------------------------------------------------------
/// Opens a dialog displaying a status message
//-----------------------------------------------------------------------------
void XAppl::showMsgDialog () {
   OTRACE3 (dt, "XAppl::showMsgDialog ()");
   YGP::StatusObject obj (YGP::StatusObject::INFO,
			  "Some very important detail");
   obj.generalize ("Generalized info-message");
   XGP::MessageDlg::create (obj);
}

//-----------------------------------------------------------------------------
/// Opens a dialog to enter login data
//-----------------------------------------------------------------------------
void XAppl::showLoginDialog () {
   XGP::LoginDialog* dlg (XGP::LoginDialog::create (""));
   dlg->get_window ()->set_transient_for (get_window ());
   dlg->sigLogin.connect (mem_fun (*this, &XAppl::loginEvent));
}

//-----------------------------------------------------------------------------
/// Opens a dialog to enter login data
//-----------------------------------------------------------------------------
void XAppl::showSearchDialog () {
   XGP::SearchDialog::create (get_window ())->signalFind.connect
      (mem_fun (*this, &XAppl::find));
}

//-----------------------------------------------------------------------------
/// Shows the about box
//-----------------------------------------------------------------------------
void XAppl::showAboutbox () {
   XGP::XAbout* about (XGP::XAbout::create
                       (Glib::locale_to_utf8
			("Copyright (C) 2003 - 2009 Markus Schwab\ne-mail: g17m0@users.sourceforge.net\n"
			 "\nCompiled on " __DATE__ " at " __TIME__),
			"X-Appl V" PACKAGE_VERSION));
   about->setIconProgram (xpmXAppl);
   about->setLogoAuthor (picAuthor, sizeof (picAuthor));
}

//-----------------------------------------------------------------------------
/// Add the value of file to the list
//-----------------------------------------------------------------------------
void XAppl::addActFile () {
   if (file.size ())
      // This could be optimized ...
      for (unsigned int i (0); i < (unsigned int)num; ++i)
	 addFile (file);
}

//-----------------------------------------------------------------------------
/// Add the selected file to the list
/// \param file: Name of file to add
//-----------------------------------------------------------------------------
void XAppl::addFile (const std::string& file) {
   TRACE9 ("XAppl::addFile (const std::string&) - " << file);

   try {
      YGP::File objFile (file.c_str ());
      YGP::ATimestamp t (objFile.time (), false );
      YGP::ANumeric s (objFile.size ());
      std::string name (objFile.path ());
      name += objFile.name ();

      Check3 (files);
      Gtk::TreeModel::Row row (*(files->append ()));
      row[cols.icon] = XGP::XFileList::getIcon4File (objFile);
      row[cols.name] = objFile.name ();
      row[cols.size] = s.toString ();
      row[cols.date] = t.toString ().c_str ();

      // Enable menus
      apMenus[SAVE]->set_sensitive (true);
      apMenus[PRINT]->set_sensitive (true);
   }
   catch (YGP::FileError& e) {
      Gtk::MessageDialog dlg (e.what (), Gtk::MESSAGE_ERROR);
      dlg.run ();
   }
}

//-----------------------------------------------------------------------------
/// Save result of comparison into a file
/// \param file: Name of file to create
//-----------------------------------------------------------------------------
void XAppl::saveToFile (const std::string& file) {
   TRACE9 ("XAppl::saveToFile (string&): " << file);

   FILE* output (fopen (file.c_str (), "w"));
   if (!output) {
      std::string err ("Can't create file `%1'\n Reason: %2");
      err.replace (err.find ("%1"), 2, file);
      err.replace (err.find ("%2"), 2, strerror (errno));
      Gtk::MessageDialog dlg (err, Gtk::MESSAGE_ERROR);
      dlg.run ();
      return;
   }
   writeToStream (output);
}

//-----------------------------------------------------------------------------
/// Save result of comparison into a file
/// \param file: Stream to fill
//-----------------------------------------------------------------------------
void XAppl::writeToStream (FILE* file) {
   TRACE9 ("XAppl::writeToStream (FILE*)");
   Check (file);

   Gtk::TreeNodeChildren rows (files->children ());
   Gtk::TreeNodeChildren::const_iterator i (rows.begin ());
   while (i != rows.end ()) {
      std::string filename ((*i)[cols.name]);
      TRACE8 ("XAppl::writeToStream (FILE*): " << filename);
      Glib::ustring date ((*i)[cols.date]);
      Glib::ustring size ((*i)[cols.size]);

      filename.append (78 - filename.length () - size.length () - date.length (), ' ');
      fprintf (file, "%s%s %s\n", filename.c_str (), size.c_str (), date.c_str ());
      ++i;
   } // end-for all text-columns
}

//-----------------------------------------------------------------------------
/// Callback for login-dialog
/// \param user: Input for the user
/// \param password: Input for the password
/// \returns bool: true
//-----------------------------------------------------------------------------
bool XAppl::loginEvent (const Glib::ustring& user,
			const Glib::ustring& password) {
   status.pop ();
   Glib::ustring txt ("User: ");
   txt += user;
   txt += "; Password: ";
   txt += password;
   status.push (txt);
   return true;
}

//-----------------------------------------------------------------------------
/// Callback for find-dialog
/// \param text: Text to find
//-----------------------------------------------------------------------------
void XAppl::find (const Glib::ustring& text) {
   status.pop ();
   Glib::ustring txt ("Find: ");
   status.push (txt + text);
}


//-----------------------------------------------------------------------------
/// Command animate - animates a window
//-----------------------------------------------------------------------------
void XAppl::animate () {
   YGP::StatusObject obj (YGP::StatusObject::INFO, "Animated window");
   Glib::signal_idle ().connect (bind (ptr_fun (&XAppl::doAnimate), XGP::MessageDlg::create (obj)));
}

//-----------------------------------------------------------------------------
/// Animates a window
//-----------------------------------------------------------------------------
bool XAppl::doAnimate (Gtk::Widget* winAnim) {
   AnimWindow* albl (AnimWindow::create (winAnim->get_window ()));
   albl->animate ();
   return false;
}


//-----------------------------------------------------------------------------
/// Entrypoint of application
/// \param argc: Number of parameters
/// \param argv: Array with pointer to parameter
/// \returns int: Status
//-----------------------------------------------------------------------------
int main (int argc, char* argv[]) {
   srand (time (0));

   XAppl::initI18n ();

   Gtk::Main appl (argc, argv);
   XAppl win;
   appl.run (win);
   return 0;
}
